openapi: 3.0.3
info:
  title: Online Scout Manager (OSM) API
  description: |
    API for managing scout sections, members, events, badges, invoices, and patrols in Online Scout Manager.
    
    ## Authentication
    This API uses OAuth 2.0 bearer token authentication. All endpoints require an access token obtained through one of two OAuth flows:
    
    ### 1. Client Credentials Flow (Machine-to-Machine)
    Use this flow for automated systems or background processes where only one user account is needed. This flow does not require user interaction.
    
    **Use Case**: Automated scripts, cron jobs, server-to-server communication
    
    ### 2. Authorization Code Flow (User Login)
    Use this flow when you need users to authenticate with their own OSM credentials. This opens the OSM login screen where users enter their username and password, then redirects back to your application with an authorization code.
    
    **Use Case**: Web applications, mobile apps, desktop applications where multiple users need to access their own data
    
    ## Rate Limiting
    The API implements rate limiting. Monitor response headers for rate limit information.
    
    ## Base URL
    All API endpoints are relative to: `https://www.onlinescoutmanager.co.uk`
    
  version: 1.0.0
  contact:
    name: OSM API Client
    url: https://github.com/MMollart/osm

servers:
  - url: https://www.onlinescoutmanager.co.uk
    description: Production OSM API server

security:
  - bearerAuth: []

tags:
  - name: Members
    description: Member management and custom data operations
  - name: Finance
    description: Invoice and payment operations
  - name: Events
    description: Event management and attendee tracking
  - name: Badges
    description: Badge progress and records
  - name: Patrols
    description: Patrol creation and member assignments
  - name: Authentication
    description: OAuth token operations

paths:
  /ext/members/contact/grid/:
    post:
      tags:
        - Members
      summary: Get members grid data
      description: Retrieve all member data for a section and term using the efficient grid API endpoint. This is the most efficient endpoint for bulk member data retrieval.
      operationId: getMembersGrid
      parameters:
        - name: action
          in: query
          required: true
          schema:
            type: string
            enum: [getMembers]
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - section_id
                - term_id
              properties:
                section_id:
                  type: integer
                  description: Numeric OSM section identifier
                  example: 12345
                term_id:
                  type: integer
                  description: OSM term ID
                  example: 67890
      responses:
        '200':
          description: Successful response with full member grid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MembersGridResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
      security:
        - bearerAuth: [section:member:read]

  /ext/members/contact/:
    get:
      tags:
        - Members
      summary: Get list of members
      description: Retrieve a list of members for a given section and term, or a specific member by ID.
      operationId: getMembers
      parameters:
        - name: action
          in: query
          required: true
          schema:
            type: string
            enum: [getListOfMembers, getIndividual]
          description: API action - getListOfMembers for all members, getIndividual for specific member
        - name: sectionid
          in: query
          required: true
          schema:
            type: integer
          example: 12345
        - name: termid
          in: query
          required: true
          schema:
            type: integer
          example: 67890
        - name: section
          in: query
          schema:
            type: string
            enum: [beavers, cubs, scouts, explorers]
          description: Section type slug
        - name: scoutid
          in: query
          schema:
            type: integer
          description: Specific member ID (only for action=getIndividual)
        - name: sort
          in: query
          schema:
            type: string
            enum: [dob, firstname, lastname]
            default: dob
      responses:
        '200':
          description: List of members or single member data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MembersResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: [section:member:read]

  /ext/customdata/:
    get:
      tags:
        - Members
      summary: Get custom data for all members
      description: Retrieve custom data fields for all members in a section/term or a specific member.
      operationId: getCustomData
      parameters:
        - name: action
          in: query
          required: true
          schema:
            type: string
            enum: [getCustomData]
        - name: section_id
          in: query
          required: true
          schema:
            type: integer
          example: 12345
        - name: term_id
          in: query
          schema:
            type: integer
          example: 67890
        - name: scout_id
          in: query
          schema:
            type: integer
          description: Specific member ID for individual data retrieval
      responses:
        '200':
          description: Custom data response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomDataResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: [section:member:read]

    post:
      tags:
        - Members
      summary: Update custom member data
      description: Update a custom data field value for a specific member.
      operationId: updateMemberData
      parameters:
        - name: action
          in: query
          required: true
          schema:
            type: string
            enum: [updateColumn]
        - name: section_id
          in: query
          required: true
          schema:
            type: integer
          example: 12345
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - associated_id
                - column_id
                - value
              properties:
                service:
                  type: string
                  enum: [desktop]
                  default: desktop
                associated_id:
                  type: string
                  description: Member ID
                  example: "11111"
                associated_type:
                  type: string
                  enum: [member]
                  default: member
                value:
                  type: string
                  description: New value to set
                  example: "730.99"
                column_id:
                  type: string
                  description: Custom data column ID
                  example: "45247"
                group_id:
                  type: string
                  description: Custom data group ID
                  default: "5"
                  example: "5"
                context:
                  type: string
                  enum: [members]
                  default: members
      responses:
        '200':
          description: Update successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  data:
                    type: object
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: [section:member:write, section:attendance:write]

  /ext/finances/invoices/summary/:
    get:
      tags:
        - Finance
      summary: Get invoice summary
      description: Retrieve invoice summary for a section and term with optional archived invoices.
      operationId: getInvoices
      parameters:
        - name: action
          in: query
          required: true
          schema:
            type: string
            enum: [getInvoiceSummary]
        - name: sectionid
          in: query
          required: true
          schema:
            type: integer
          example: 12345
        - name: termid
          in: query
          required: true
          schema:
            type: integer
          example: 67890
        - name: is_dgrid
          in: query
          schema:
            type: boolean
            default: true
        - name: archived
          in: query
          schema:
            type: boolean
            default: false
          description: Include archived invoices
      responses:
        '200':
          description: Invoice summary data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceSummaryResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: [section:finance:read, section:member:read]

  /ext/finances/invoices/:
    get:
      tags:
        - Finance
      summary: Get invoice details
      description: Retrieve detailed information for a specific invoice.
      operationId: getInvoiceDetails
      parameters:
        - name: action
          in: query
          required: true
          schema:
            type: string
            enum: [getInvoiceDetails]
        - name: sectionid
          in: query
          required: true
          schema:
            type: integer
          example: 12345
        - name: invoiceid
          in: query
          required: true
          schema:
            type: integer
          example: 22222
      responses:
        '200':
          description: Invoice details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceDetailsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: [section:finance:read, section:member:read]

    post:
      tags:
        - Finance
      summary: Manage invoices
      description: Create invoices or record payments
      operationId: manageInvoices
      parameters:
        - name: action
          in: query
          required: true
          schema:
            type: string
            enum: [addInvoice, updateBatch]
        - name: sectionid
          in: query
          required: true
          schema:
            type: integer
          example: 12345
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              oneOf:
                - $ref: '#/components/schemas/AddInvoiceRequest'
                - $ref: '#/components/schemas/RecordPaymentRequest'
      responses:
        '200':
          description: Operation successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  invoiceid:
                    type: integer
                  data:
                    type: object
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: [section:finance:read, section:finance:write]

  /ext/events/summary/:
    get:
      tags:
        - Events
      summary: Get events
      description: Fetch events for a section and term, with optional filtering for archived events.
      operationId: getEvents
      parameters:
        - name: action
          in: query
          required: true
          schema:
            type: string
            enum: [getEvents]
        - name: sectionid
          in: query
          required: true
          schema:
            type: integer
          example: 12345
        - name: termid
          in: query
          required: true
          schema:
            type: integer
          example: 67890
        - name: onlyArchived
          in: query
          schema:
            type: integer
            enum: [0, 1]
            default: 0
          description: "0 for active events, 1 for archived events"
      responses:
        '200':
          description: List of events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: [section:event:read]

  /v3/events/event/{eventId}/basic_details:
    get:
      tags:
        - Events
      summary: Get event details
      description: Fetch basic details for a specific event by ID.
      operationId: getEventDetails
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: integer
          example: 55555
      responses:
        '200':
          description: Event details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventDetailsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: [section:event:read]

  /v3/events/event/{eventId}/summary:
    get:
      tags:
        - Events
      summary: Get event summary
      description: Fetch comprehensive summary information for a specific event.
      operationId: getEventSummary
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: integer
          example: 55555
      responses:
        '200':
          description: Event summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventSummaryResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: [section:event:read]

  /v3/events/event/{eventId}/attendees:
    get:
      tags:
        - Events
      summary: Get event attendees
      description: Fetch the list of members attending a specific event.
      operationId: getEventAttendees
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: integer
          example: 55555
      responses:
        '200':
          description: List of event attendees
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventAttendeesResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: [section:event:read]

  /ext/badges/records/:
    get:
      tags:
        - Badges
      summary: Get badges or badge records
      description: Fetch available badges for a section or badge progress records for members.
      operationId: getBadgesOrRecords
      parameters:
        - name: action
          in: query
          required: true
          schema:
            type: string
            enum: [getAvailableBadges, getBadgeRecords]
        - name: section
          in: query
          required: true
          schema:
            type: string
            enum: [beavers, cubs, scouts, explorers]
          description: Section slug
          example: scouts
        - name: sectionid
          in: query
          required: true
          schema:
            type: integer
          example: 33333
        - name: type_id
          in: query
          required: true
          schema:
            type: integer
            enum: [1, 2, 3, 4]
          description: "Badge type: 1=challenge, 2=activity, 3=staged, 4=core"
          example: 1
        - name: payload
          in: query
          schema:
            type: integer
            enum: [0, 1]
            default: 1
          description: Include detailed badge payload data
        - name: term_id
          in: query
          schema:
            type: integer
          description: Required for getBadgeRecords action
          example: 44444
        - name: badge_id
          in: query
          schema:
            type: integer
          description: Required for getBadgeRecords action
          example: 94
        - name: section_id
          in: query
          schema:
            type: integer
          description: Required for getBadgeRecords action (duplicate of sectionid)
        - name: badge_version
          in: query
          schema:
            type: integer
            default: 0
          description: Badge version number
      responses:
        '200':
          description: Badge data or badge records
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/BadgesResponse'
                  - $ref: '#/components/schemas/BadgeRecordsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: [section:badge:read]

  /ext/settings/patrols/:
    post:
      tags:
        - Patrols
      summary: Manage patrols
      description: Create or delete patrols in a section.
      operationId: managePatrols
      parameters:
        - name: action
          in: query
          required: true
          schema:
            type: string
            enum: [add, delete]
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              oneOf:
                - $ref: '#/components/schemas/CreatePatrolRequest'
                - $ref: '#/components/schemas/DeletePatrolRequest'
      responses:
        '200':
          description: Operation successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  patrol_id:
                    type: integer
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: [section:admin:write]

  /ext/members/patrols/:
    get:
      tags:
        - Patrols
      summary: Get patrols with members
      description: Retrieve patrols and their member assignments for a section and term.
      operationId: getPatrolsWithPeople
      parameters:
        - name: action
          in: query
          required: true
          schema:
            type: string
            enum: [getPatrolsWithPeople]
        - name: sectionid
          in: query
          required: true
          schema:
            type: integer
          example: 12345
        - name: termid
          in: query
          required: true
          schema:
            type: integer
          example: 67890
        - name: include_no_patrol
          in: query
          schema:
            type: string
            enum: ['y']
          description: Include members without patrol assignment
      responses:
        '200':
          description: Patrols with member assignments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatrolsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: [section:member:read, section:attendance:write]

    post:
      tags:
        - Patrols
      summary: Manage patrol assignments
      description: Assign or remove members from patrols.
      operationId: managePatrolAssignments
      parameters:
        - name: action
          in: query
          required: true
          schema:
            type: string
            enum: [updateMemberPatrol]
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatrolAssignmentRequest'
      responses:
        '200':
          description: Assignment updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: [section:member:write, section:attendance:write]

  /oauth/authorize:
    get:
      tags:
        - Authentication
      summary: Initiate OAuth2 authorization code flow
      description: |
        Redirect users to this endpoint to initiate the OAuth2 authorization code flow. 
        Users will see the OSM login screen where they enter their credentials.
        After successful authentication, OSM redirects back to your application with an authorization code.
        
        **Flow Steps:**
        1. Redirect user to this endpoint with required parameters
        2. User logs in with their OSM credentials
        3. User grants permissions to your application
        4. OSM redirects to your redirect_uri with an authorization code
        5. Exchange the code for an access token using POST /oauth/token
        
        **Important**: This endpoint returns an HTML login page, not JSON.
      operationId: authorizeUser
      parameters:
        - name: response_type
          in: query
          required: true
          schema:
            type: string
            enum: [code]
          description: Must be "code" for authorization code flow
        - name: client_id
          in: query
          required: true
          schema:
            type: string
          description: Your application's client ID
          example: your_client_id
        - name: redirect_uri
          in: query
          required: true
          schema:
            type: string
            format: uri
          description: URL to redirect to after authorization (must be registered with your app)
          example: https://your-app.com/oauth/callback
        - name: scope
          in: query
          required: true
          schema:
            type: string
          description: Space-separated list of OAuth scopes
          example: section:member:read section:finance:read
        - name: state
          in: query
          schema:
            type: string
          description: Optional state parameter for CSRF protection (recommended)
          example: random_state_string_123
      responses:
        '200':
          description: HTML login page displayed to user
          content:
            text/html:
              schema:
                type: string
        '302':
          description: Redirect to redirect_uri with authorization code or error
          headers:
            Location:
              schema:
                type: string
              description: |
                Redirect URL with parameters:
                - Success: ?code=AUTH_CODE&state=STATE_VALUE
                - Error: ?error=ERROR_CODE&error_description=DESCRIPTION&state=STATE_VALUE
      security: []

  /oauth/token:
    post:
      tags:
        - Authentication
      summary: Get OAuth access token
      description: |
        Obtain an OAuth 2.0 access token using one of three grant types:
        
        **1. Client Credentials** (Machine-to-Machine):
        - Use for automated systems without user interaction
        - Requires client_id and client_secret only
        
        **2. Authorization Code** (User Login):
        - Exchange authorization code from /oauth/authorize for tokens
        - Requires code from redirect, client_id, client_secret, and redirect_uri
        
        **3. Refresh Token**:
        - Get a new access token using a refresh token
        - Extends the session without re-authentication
      operationId: getToken
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ClientCredentialsRequest'
                - $ref: '#/components/schemas/AuthorizationCodeRequest'
                - $ref: '#/components/schemas/RefreshTokenRequest'
              discriminator:
                propertyName: grant_type
                mapping:
                  client_credentials: '#/components/schemas/ClientCredentialsRequest'
                  authorization_code: '#/components/schemas/AuthorizationCodeRequest'
                  refresh_token: '#/components/schemas/RefreshTokenRequest'
            examples:
              clientCredentials:
                summary: Client Credentials Flow
                value:
                  grant_type: client_credentials
                  client_id: your_client_id
                  client_secret: your_client_secret
                  scope: section:member:read section:finance:read
              authorizationCode:
                summary: Authorization Code Flow
                value:
                  grant_type: authorization_code
                  code: AUTH_CODE_FROM_REDIRECT
                  client_id: your_client_id
                  client_secret: your_client_secret
                  redirect_uri: https://your-app.com/oauth/callback
              refreshToken:
                summary: Refresh Token
                value:
                  grant_type: refresh_token
                  refresh_token: EXISTING_REFRESH_TOKEN
                  client_id: your_client_id
                  client_secret: your_client_secret
      responses:
        '200':
          description: Access token granted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Invalid credentials or authorization code
      security: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: OAuth 2.0 bearer token obtained from /oauth/token endpoint
    
    oauth2:
      type: oauth2
      description: |
        OAuth 2.0 flows for authentication. Choose the appropriate flow based on your use case:
        - **Client Credentials**: For server-to-server/machine-to-machine authentication
        - **Authorization Code**: For user-facing applications requiring OSM login
      flows:
        clientCredentials:
          tokenUrl: https://www.onlinescoutmanager.co.uk/oauth/token
          scopes:
            section:member:read: Read member information
            section:member:write: Update member data
            section:finance:read: View financial data
            section:finance:write: Manage invoices and payments
            section:event:read: Access event information
            section:badge:read: View badge records
            section:admin:write: Administrative operations
            section:attendance:write: Manage attendance and patrols
        
        authorizationCode:
          authorizationUrl: https://www.onlinescoutmanager.co.uk/oauth/authorize
          tokenUrl: https://www.onlinescoutmanager.co.uk/oauth/token
          scopes:
            section:member:read: Read member information
            section:member:write: Update member data
            section:finance:read: View financial data
            section:finance:write: Manage invoices and payments
            section:event:read: Access event information
            section:badge:read: View badge records
            section:admin:write: Administrative operations
            section:attendance:write: Manage attendance and patrols

  schemas:
    MembersGridResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            identifier:
              type: string
            items:
              type: array
              items:
                type: object
                properties:
                  scoutid:
                    type: integer
                  firstname:
                    type: string
                  lastname:
                    type: string
                  dob:
                    type: string
                    format: date
                  patrol:
                    type: string
                  custom_data:
                    type: object
                    additionalProperties: true

    MembersResponse:
      type: object
      properties:
        identifier:
          type: string
        items:
          type: array
          items:
            type: object
            properties:
              scoutid:
                type: integer
                example: 11111
              firstname:
                type: string
                example: Member
              lastname:
                type: string
                example: A
              dob:
                type: string
                format: date
                example: "2010-05-15"
              patrol:
                type: string
                example: Eagle Patrol

    CustomDataResponse:
      type: object
      properties:
        data:
          type: object
          additionalProperties:
            type: object
            properties:
              group_id:
                type: string
              columns:
                type: array
                items:
                  type: object
                  properties:
                    column_id:
                      type: string
                    varname:
                      type: string
                    label:
                      type: string
                    value:
                      type: string

    InvoiceSummaryResponse:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
            properties:
              invoiceid:
                type: integer
                example: 22222
              name:
                type: string
                example: "Member Name (REF001)"
              entrydate:
                type: string
                format: date
              invoice_date:
                type: string
                format: date
              in:
                type: number
                format: float
                description: Income amount
              exp:
                type: number
                format: float
                description: Expense amount
              total:
                type: number
                format: float
              finalised:
                type: string

    InvoiceDetailsResponse:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              type:
                type: string
                enum: [Income, Expense]
              date:
                type: string
                format: date
              amount:
                type: number
                format: float
              category:
                type: string
              comments:
                type: string

    AddInvoiceRequest:
      type: object
      required:
        - name
        - date
      properties:
        name:
          type: string
          example: "Member Name (REF001)"
        extra:
          type: string
          description: Additional notes
        date:
          type: string
          format: date
          example: "2025-12-31"

    RecordPaymentRequest:
      type: object
      required:
        - amount
        - type
        - date
        - section_id
        - invoice_id
      properties:
        amount:
          type: string
          example: "100.00"
        comments:
          type: string
          example: "Bank transfer received"
        type:
          type: string
          enum: [Income]
          default: Income
        date:
          type: string
          format: date
          example: "2025-10-27"
        section_id:
          type: string
          example: "12345"
        invoice_id:
          type: string
          example: "22222"
        context:
          type: string
          enum: [invoice]
          default: invoice
        id:
          type: string
          default: "0"
        pay_username:
          type: string
          default: "_x_"
        category:
          type: string
          default: "Payment 1"
          example: "Payment 1"

    EventsResponse:
      type: object
      properties:
        events:
          type: array
          items:
            type: object
            properties:
              eventid:
                type: integer
                example: 55555
              name:
                type: string
                example: "Summer Camp 2025"
              startdate:
                type: string
                format: date-time
              enddate:
                type: string
                format: date-time
              archived:
                type: string

    EventDetailsResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            eventid:
              type: integer
            name:
              type: string
            location:
              type: string
            notes:
              type: string
            startdate:
              type: string
              format: date-time
            enddate:
              type: string
              format: date-time

    EventSummaryResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            eventid:
              type: integer
            name:
              type: string
            attendees_count:
              type: integer
            cost:
              type: number
              format: float

    EventAttendeesResponse:
      type: array
      items:
        type: object
        properties:
          member_id:
            type: integer
            example: 11111
          full_name:
            type: string
            example: "Scout Member"
          photo_guid:
            type: string
          patrol_id:
            type: integer

    BadgesResponse:
      type: object
      properties:
        badges:
          type: array
          items:
            type: object
            properties:
              badge_id:
                type: integer
                example: 94
              name:
                type: string
                example: "Outdoor Challenge"
              badge_version:
                type: integer
              badge_group:
                type: string

    BadgeRecordsResponse:
      type: object
      properties:
        status:
          type: boolean
        data:
          type: object
          properties:
            details:
              type: object
            members:
              type: array
              items:
                type: object
                properties:
                  member_id:
                    type: integer
                  firstname:
                    type: string
                  lastname:
                    type: string
                  completed:
                    type: string

    CreatePatrolRequest:
      type: object
      required:
        - sectionid
        - name
      properties:
        sectionid:
          type: integer
          example: 12345
        name:
          type: string
          example: "Dragon Patrol"
        termid:
          type: integer
          example: 67890

    DeletePatrolRequest:
      type: object
      required:
        - sectionid
        - patrolid
      properties:
        sectionid:
          type: integer
          example: 12345
        patrolid:
          type: integer
          example: 12345

    PatrolsResponse:
      type: object
      properties:
        patrols:
          type: array
          items:
            type: object
            properties:
              patrol_id:
                type: integer
              patrol_name:
                type: string
              members:
                type: array
                items:
                  type: object
                  properties:
                    member_id:
                      type: integer
                    firstname:
                      type: string
                    lastname:
                      type: string

    PatrolAssignmentRequest:
      type: object
      required:
        - section_id
        - member_id
      properties:
        section_id:
          type: integer
          example: 12345
        member_id:
          type: integer
          example: 11111
        patrol_id:
          type: integer
          example: 12345
          description: Patrol ID to assign, or omit/null to remove from patrol

    ClientCredentialsRequest:
      type: object
      required:
        - grant_type
        - client_id
        - client_secret
      properties:
        grant_type:
          type: string
          enum: [client_credentials]
          description: Must be "client_credentials"
        client_id:
          type: string
          description: Your application's client ID
        client_secret:
          type: string
          description: Your application's client secret
        scope:
          type: string
          description: Space-separated list of OAuth scopes
          example: "section:member:read section:finance:read"

    AuthorizationCodeRequest:
      type: object
      required:
        - grant_type
        - code
        - client_id
        - client_secret
        - redirect_uri
      properties:
        grant_type:
          type: string
          enum: [authorization_code]
          description: Must be "authorization_code"
        code:
          type: string
          description: Authorization code received from /oauth/authorize redirect
          example: AUTH_CODE_FROM_CALLBACK
        client_id:
          type: string
          description: Your application's client ID
        client_secret:
          type: string
          description: Your application's client secret
        redirect_uri:
          type: string
          format: uri
          description: Must match the redirect_uri used in /oauth/authorize
          example: https://your-app.com/oauth/callback

    RefreshTokenRequest:
      type: object
      required:
        - grant_type
        - refresh_token
        - client_id
        - client_secret
      properties:
        grant_type:
          type: string
          enum: [refresh_token]
        refresh_token:
          type: string
        client_id:
          type: string
        client_secret:
          type: string

    TokenResponse:
      type: object
      properties:
        access_token:
          type: string
        token_type:
          type: string
          example: Bearer
        expires_in:
          type: integer
          example: 3600
        refresh_token:
          type: string
        scope:
          type: string
          example: "section:member:read section:finance:read"

    Error:
      type: object
      properties:
        error:
          type: string
        error_description:
          type: string
        message:
          type: string

  responses:
    UnauthorizedError:
      description: Authentication token is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    ForbiddenError:
      description: Insufficient permissions for this operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    RateLimitError:
      description: Rate limit exceeded. Check Retry-After header.
      headers:
        Retry-After:
          schema:
            type: integer
          description: Seconds until rate limit resets
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
